class BFInstance{constructor(){this.memory=[0];this.pointer=0}right(){this.pointer++;if(this.pointer===this.memory.length){this.memory.push(0)}}left(){this.pointer--;if(this.pointer===-1){this.memory=[0].concat(this.memory);this.pointer=0}}increment(){this.memory[this.pointer]+=1}decrement(){this.memory[this.pointer]-=1}getCellAscii(){return String.fromCharCode(this.memory[this.pointer])}setCellAscii(setChar){this.memory[this.pointer]=setChar.charCodeAt(0)}getCellValue(){return this.memory[this.pointer]}setCellValue(setInt){this.memory[this.pointer]=setInt}}class BFInterpreter{constructor(outFunc,inFunc){this.instance=new BFInstance();this.outFunc=outFunc;this.inFunc=inFunc;this.instructions=[];this.insPointer=0}executeInstructions(inString){this.instructions=inString.split('');this.insPointer=0;while(this.insPointer<this.instructions.length){this.doInstruction(this.instructions[this.insPointer]);this.insPointer+=1}}findLoopClose(){var ignore=0;for(let i=this.insPointer+1;i<this.instructions.length;i+=1){var ch=this.instructions[i];if(ch===']'){if(ignore===0){return i}else{ignore-=1}}if(ch==='['){ignore+=1}}return false}findLoopOpen(){var ignore=0;for(let i=this.insPointer-1;i>-1;i-=1){var ch=this.instructions[i];if(ch==='['){if(ignore===0){return i}else{ignore-=1}}if(ch===']'){ignore+=1}}return false}startLoop(){if(this.instance.getCellValue()===0){const closeLoop=this.findLoopClose();if(closeLoop){this.insPointer=closeLoop}else{throw new Error('BRAINFJSK - JMP to end of loop without closing ]!')}}}endLoop(){if(this.instance.getCellValue()!==0){const startLoop=this.findLoopOpen();if(startLoop){this.insPointer=startLoop}else{throw new Error('BRAINFJSK - JMP back to start of loop without starting [!')}}}doInstruction(insChar){const instructionTable={'+':()=>{this.instance.increment()},'-':()=>{this.instance.decrement()},'<':()=>{this.instance.left()},'>':()=>{this.instance.right()},'[':()=>{this.startLoop()},']':()=>{this.endLoop()},'.':()=>{this.outFunc(this.instance.getCellAscii())},',':()=>{this.instance.setCellAscii(this.inFunc())}};if(Object.keys(instructionTable).indexOf(insChar)!==-1){instructionTable[insChar]()}}}
